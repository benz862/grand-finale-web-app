import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

interface SupportEmailData {
  id: string;
  name: string;
  email: string;
  userId?: string;
  subject: string;
  category: string;
  message: string;
  submittedAt?: string;
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    // Get the request body
    const { supportData } = await req.json()

    // Validate required fields
    if (!supportData || !supportData.name || !supportData.email || !supportData.subject || !supportData.message) {
      return new Response(
        JSON.stringify({ error: 'Missing required fields' }),
        { 
          status: 400, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      )
    }

    // Get SendGrid API key from environment
    const sendGridApiKey = Deno.env.get('SENDGRID_API_KEY')
    if (!sendGridApiKey) {
      console.error('SENDGRID_API_KEY not found in environment variables')
      return new Response(
        JSON.stringify({ error: 'Email service not configured' }),
        { 
          status: 500, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      )
    }

    // Prepare email content
    const emailSubject = `The Grand Finale - Support Request: ${supportData.subject}`
    const emailBody = `
Support Request Details:

Name: ${supportData.name}
Email: ${supportData.email}
User ID: ${supportData.userId || 'Not logged in'}
Subject: ${supportData.subject}
Category: ${supportData.category}
Message: ${supportData.message}
Submitted: ${supportData.submittedAt ? new Date(supportData.submittedAt).toLocaleString() : 'N/A'}
Request ID: ${supportData.id}
    `.trim()

    // Create HTML email
    const htmlEmail = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Support Request - ${supportData.subject}</title>
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
          .container { max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { background: #17394B; color: white; padding: 20px; text-align: center; }
          .content { padding: 20px; background: #f9f9f9; }
          .section { margin-bottom: 20px; padding: 15px; background: white; border-radius: 5px; }
          .section h3 { color: #17394B; margin-top: 0; }
          .field { margin-bottom: 10px; }
          .field strong { color: #17394B; }
          .message { background: #f5f5f5; padding: 15px; border-left: 4px solid #E3B549; }
          .footer { text-align: center; padding: 20px; color: #666; font-size: 12px; }
          .request-id { background: #E3B549; color: #17394B; padding: 10px; text-align: center; font-weight: bold; border-radius: 5px; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <h1>The Grand Finale</h1>
            <h2>Support Request Received</h2>
          </div>
          
          <div class="content">
            <div class="request-id">
              Request ID: ${supportData.id}
            </div>
            
            <div class="section">
              <h3>User Information</h3>
              <div class="field"><strong>Name:</strong> ${supportData.name}</div>
              <div class="field"><strong>Email:</strong> ${supportData.email}</div>
              <div class="field"><strong>User ID:</strong> ${supportData.userId || 'Not logged in'}</div>
              <div class="field"><strong>Submitted:</strong> ${supportData.submittedAt ? new Date(supportData.submittedAt).toLocaleString() : 'N/A'}</div>
            </div>
            
            <div class="section">
              <h3>Request Details</h3>
              <div class="field"><strong>Subject:</strong> ${supportData.subject}</div>
              <div class="field"><strong>Category:</strong> ${supportData.category}</div>
              <div class="field"><strong>Message:</strong></div>
              <div class="message">${supportData.message}</div>
            </div>
          </div>
          
          <div class="footer">
            <p>This email was automatically generated by The Grand Finale support system.</p>
            <p>Request ID: ${supportData.id}</p>
          </div>
        </div>
      </body>
      </html>
    `

    // Send email via SendGrid
    const sendGridResponse = await fetch('https://api.sendgrid.com/v3/mail/send', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${sendGridApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        personalizations: [
          {
            to: [{ email: 'support@skillbinder.com', name: 'Support Team' }],
            subject: emailSubject,
          },
        ],
        from: {
          email: 'noreply@skillbinder.com', // Replace with your verified sender
          name: 'The Grand Finale Support System',
        },
        content: [
          {
            type: 'text/plain',
            value: emailBody,
          },
          {
            type: 'text/html',
            value: htmlEmail,
          },
        ],
      }),
    })

    if (!sendGridResponse.ok) {
      const errorText = await sendGridResponse.text()
      console.error('SendGrid API error:', sendGridResponse.status, errorText)
      throw new Error(`SendGrid API error: ${sendGridResponse.status}`)
    }

    console.log('Support request email sent successfully via SendGrid')

    return new Response(
      JSON.stringify({ 
        success: true, 
        message: 'Email sent successfully',
        requestId: supportData.id 
      }),
      { 
        status: 200, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    )

  } catch (error) {
    console.error('Error sending support email:', error)
    return new Response(
      JSON.stringify({ 
        error: 'Failed to send email',
        details: error.message 
      }),
      { 
        status: 500, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    )
  }
}) 