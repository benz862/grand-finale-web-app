// Production-ready email service using SendGrid
// You'll need to install: npm install @sendgrid/mail
// And set up your SendGrid API key in environment variables

import sgMail from '@sendgrid/mail';

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ success: false, error: 'Method not allowed' });
  }

  try {
    const { to, subject, body, supportData } = req.body;

    // Validate required fields
    if (!to || !subject || !body) {
      return res.status(400).json({ 
        success: false, 
        error: 'Missing required fields: to, subject, body' 
      });
    }

    // Set up SendGrid
    sgMail.setApiKey(process.env.SENDGRID_API_KEY);

    // Create HTML version of the email
    const htmlBody = body
      .replace(/\n/g, '<br>')
      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
      .replace(/\*(.*?)\*/g, '<em>$1</em>');

    // Prepare the email
    const msg = {
      to: to,
      from: {
        email: 'noreply@skillbinder.com',
        name: 'The Grand Finale Support System'
      },
      subject: subject,
      text: body,
      html: `
        <!DOCTYPE html>
        <html>
        <head>
          <meta charset="utf-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>Support Request - ${supportData?.subject || 'New Request'}</title>
          <style>
            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
            .container { max-width: 600px; margin: 0 auto; padding: 20px; }
            .header { background: #17394B; color: white; padding: 20px; text-align: center; }
            .content { padding: 20px; background: #f9f9f9; }
            .section { margin-bottom: 20px; padding: 15px; background: white; border-radius: 5px; }
            .section h3 { color: #17394B; margin-top: 0; }
            .field { margin-bottom: 10px; }
            .field strong { color: #17394B; }
            .message { background: #f5f5f5; padding: 15px; border-left: 4px solid #E3B549; }
            .footer { text-align: center; padding: 20px; color: #666; font-size: 12px; }
            .request-id { background: #E3B549; color: #17394B; padding: 10px; text-align: center; font-weight: bold; border-radius: 5px; }
          </style>
        </head>
        <body>
          <div class="container">
            <div class="header">
              <h1>The Grand Finale</h1>
              <h2>Support Request Received</h2>
            </div>
            
            <div class="content">
              <div class="request-id">
                Request ID: ${supportData?.id || 'N/A'}
              </div>
              
              <div class="section">
                <h3>User Information</h3>
                <div class="field"><strong>Name:</strong> ${supportData?.name || 'N/A'}</div>
                <div class="field"><strong>Email:</strong> ${supportData?.email || 'N/A'}</div>
                <div class="field"><strong>User ID:</strong> ${supportData?.userId || 'Not logged in'}</div>
                <div class="field"><strong>Submitted:</strong> ${supportData?.submittedAt ? new Date(supportData.submittedAt).toLocaleString() : 'N/A'}</div>
              </div>
              
              <div class="section">
                <h3>Request Details</h3>
                <div class="field"><strong>Subject:</strong> ${supportData?.subject || 'N/A'}</div>
                <div class="field"><strong>Category:</strong> ${supportData?.category || 'N/A'}</div>
                <div class="field"><strong>Message:</strong></div>
                <div class="message">${supportData?.message || 'N/A'}</div>
              </div>
            </div>
            
            <div class="footer">
              <p>This email was automatically generated by The Grand Finale support system.</p>
              <p>Request ID: ${supportData?.id || 'N/A'}</p>
            </div>
          </div>
        </body>
        </html>
      `,
      // Optional: Add tracking
      trackingSettings: {
        clickTracking: {
          enable: false,
          enableText: false
        },
        openTracking: {
          enable: true
        }
      }
    };

    // Send the email
    await sgMail.send(msg);

    console.log('Support request email sent successfully to:', to);
    console.log('Request ID:', supportData?.id);

    return res.status(200).json({ 
      success: true, 
      message: 'Email sent successfully',
      requestId: supportData?.id
    });

  } catch (error) {
    console.error('Error sending support request email:', error);
    
    // Log detailed error information
    if (error.response) {
      console.error('SendGrid API Error:', error.response.body);
    }
    
    return res.status(500).json({ 
      success: false, 
      error: 'Failed to send email notification',
      details: error.message
    });
  }
} 